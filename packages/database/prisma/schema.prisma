generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id                String     @id @default(cuid())
  firebaseUid       String     @unique
  email             String     @unique
  name              String?
  role              UserRole   @default(STUDENT)
  stripeCustomerId  String?    @unique
  stripeAccountId   String?    @unique
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  lessons           Lesson[]
  purchases         Purchase[]
  reviews           Review[]
  payouts           Payout[]

  @@index([email])
  @@index([firebaseUid])
}

model Lesson {
  id               String     @id @default(cuid())
  title            String
  description      String?
  price            Int
  category         String?
  videoUrl         String?
  thumbnailUrl     String?
  published        Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  instructor       User       @relation(fields: [instructorId], references: [id])
  instructorId     String

  purchases        Purchase[]
  reviews          Review[]
  tags             Tag[]

  @@index([instructorId])
  @@index([published, category])
  @@index([title])
}

model Purchase {
  id                     String         @id @default(cuid())
  amount                 Int
  platformFee            Int
  instructorEarnings     Int
  stripePaymentIntentId  String         @unique
  stripeChargeId         String?
  status                 PurchaseStatus @default(PENDING)
  paidOut                Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  user                   User           @relation(fields: [userId], references: [id])
  userId                 String
  lesson                 Lesson         @relation(fields: [lessonId], references: [id])
  lessonId               String
  payout                 Payout?        @relation(fields: [payoutId], references: [id])
  payoutId               String?

  @@unique([userId, lessonId])
  @@index([status, paidOut])
  @@index([createdAt])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  userId      String
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    String

  @@unique([userId, lessonId])
  @@index([lessonId, rating])
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  lessons     Lesson[]
}

model Payout {
  id                  String       @id @default(cuid())
  amount              Int
  stripeTransferId    String?      @unique
  status              PayoutStatus @default(PENDING)
  createdAt           DateTime     @default(now())
  completedAt         DateTime?

  instructor          User         @relation(fields: [instructorId], references: [id])
  instructorId        String
  purchases           Purchase[]

  @@index([instructorId, status])
  @@index([createdAt])
}